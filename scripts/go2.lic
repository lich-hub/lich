=begin

	movement script based on Shaelun's goto.lic
	attempts to find the shortest route between any two rooms in the game
	requires map.dat (use updater.lic to get it)

	tillmen@lichproject.org

=end

unless defined?(Map.dijkstra)
	echo 'Your version of Lich is too old for this script.'
	exit
end

setting_value = { 'on' => true, 'true' => true, 'yes' => true, 'off' => false, 'false' => false, 'no' => false }
previous = shortest_distances = nil

unless Settings['custom targets']
	new_settings = Hash.new
	new_settings['custom targets'] = Hash.new
	Settings.to_hash.each_pair { |name,target|
		if name =~ /custom targets|typeahead|portal|vaalor_shortcut/
			new_settings[name] = target
		else
			new_settings['custom targets'][name] = target
		end
	}
	Settings.clear
	CharSettings['platinum portals'] = new_settings['portal']
	CharSettings['vaalor shortcut'] = new_settings['vaalor_shortcut']
	Settings['typeahead'] = new_settings['typeahead']
	Settings['custom targets'] = new_settings['custom targets']
	Settings.save
	new_settings = nil
end
Settings['typeahead'] ||= 1
CharSettings['platinum portals'] ||= false
CharSettings['platinum portal pass'] ||= false
CharSettings['vaalor shortcut'] ||= false
CharSettings['ice mode'] ||= :auto
CharSettings['get silvers'] ||= false

show_help = proc {
	respond
	respond "Usage: #{$lich_char}#{script.name} <target>"
	respond '              Takes you where you want to go.'
	respond '              <target> can be a room number, a custom target, a built-in target,'
	respond '              or part of the room title or room description.'
	respond "       #{$lich_char}#{script.name} save <new name>=<target>"
	respond "              Saves a custom target.  <target> can be any of the previous options, or 'current' for your current room"
	respond "       #{$lich_char}#{script.name} delete <custom target>"
	respond '              Deletes a saved custom target.'
	respond "       #{$lich_char}#{script.name} list"
	respond '              Shows your custom targets.'
	respond "       #{$lich_char}#{script.name} targets"
	respond '              Shows the built-in targets.'
	respond "       #{$lich_char}#{script.name} typeahead=<#>"
	respond '              Sets the number of typeahead lines to use.'
	respond "       #{$lich_char}#{script.name} typeahead=<#> <target>"
	respond '              Sets the number of typeahead lines to use for this trip only.'
	if XMLData.game =~ /^GS/
		respond "       #{$lich_char}#{script.name} get-silvers=<on|off>"
		respond "              Sets if #{script.name} has permission to access your bank account."
		respond "       #{$lich_char}#{script.name} get-silvers=<on|off> <target>"
		respond "              Sets if #{script.name} has permission to access your bank account for this trip only."
		respond "       #{$lich_char}#{script.name} shortcut=<on|off>"
		respond "              Sets if the shortcut to Ta'Vaalor should be used. (climbing and simming needed)"
		respond "       #{$lich_char}#{script.name} shortcut=<on|off> <target>"
		respond "              Sets if the shortcut to Ta'Vaalor should be used for this trip only."
		respond "       #{$lich_char}#{script.name} ice-mode=<auto|wait|run>"
		respond "       #{$lich_char}#{script.name} ice-mode=<auto|wait|run> <target>"
		respond "       #{$lich_char}#{script.name} get-return-trip-silvers=<on|off>"
		respond "       #{$lich_char}#{script.name} get-return-trip-silvers=<on|off> <target>"
		respond "       #{$lich_char}#{script.name} use-seeking=<on|off>"
		respond "       #{$lich_char}#{script.name} use-seeking=<on|off> <target>"
	end
	if XMLData.game =~ /^GSPlat/
		respond "       #{$lich_char}#{script.name} portals=<on|off>"
		respond '              Sets if platinum portals should be used.'
		respond "       #{$lich_char}#{script.name} portals=<on|off> <target>"
		respond '              Sets if platinum portals should be used for this trip only.'
		respond "       #{$lich_char}#{script.name} portal-pass=<on|off>"
		respond '              Turn this on if you have a wearable portal pass and don\'t need a portal ticket.'
	end
	respond
}

change_map_platinum_portals = proc { |use_portals,have_pass|
	to_nexus = {
		'7561' => "move 'go hole'; ",
		'9318' => "move 'go portal'; move 'south'; ",
		'3479' => "move 'go portal'; move 'southwest'; ",
		'2696' => "move 'go portal'; move 'west'; ",
		'17691' => "move 'go portal'; move 'northwest'; ",
		'12584' => "move 'go portal'; move 'north'; ",
		'9664' => "move 'go portal'; move 'northeast'; ",
		'20453' => "move 'go portal'; move 'east'; ",
		'16746' => "move 'go portal'; move 'southeast'; "
 	}
	to_old_nexus = {
		'7561' => "move 'go hole'; ",
		'5052' => "move 'go portal'; move 'south'; ",
		'9095' => "move 'go portal'; move 'southwest'; ",
		'2696' => "move 'go portal'; move 'west'; ",
		'11128' => "move 'go portal'; move 'northwest'; ",
		'12387' => "move 'go portal'; move 'north'; ",
		'648' => "move 'go portal'; move 'northeast'; ",
		'5766' => "move 'go portal'; move 'east'; ",
		'5940' => "move 'climb step'; move 'go portal'; move 'southeast'; "
	}
	from_nexus = {
		'7561'  => "move 'out'; ",
		'9318'  => "move 'north'; move 'go portal'; ",
		'3479'  => "move 'northeast'; move 'go portal'; ",
		'2696'  => "move 'east'; move 'go portal'; ",
		'17691' => "move 'southeast'; move 'go portal'; ",
		'12584' => "move 'south'; move 'go portal'; ",
		'9664' => "move 'southwest'; move 'go portal'; ",
		'20453' => "move 'west'; move 'go portal'; ",
		'16746' => "move 'northwest'; move 'go portal'; "
	}
	from_old_nexus = {
		'7561'  => "move 'out'; ",
		'5052'  => "move 'north'; move 'go portal'; ",
		'9095'  => "move 'northeast'; move 'go portal'; ",
		'2696'  => "move 'east'; move 'go portal'; ",
		'11128' => "move 'southeast'; move 'go portal'; ",
		'12387' => "move 'south'; move 'go portal'; ",
		'648'  => "move 'southwest'; move 'go portal'; ",
		'5766' => "move 'west'; move 'go portal'; ",
		'5940' => "move 'northwest'; move 'go portal'; "
	}
	hub_string="group_members = nil\nfor line in clear.reverse\nif line =~ /^Obvious (paths|exits)/\nbreak\nelsif line =~ /^([A-Za-z ,]+) followed\\.$/\ngroup_members = $1.split(/, | and /)\nbreak\nend\nend\nmove 'go portal'\nif group_members\necho \"Waiting for your group... To ditch them, ;send go \"\nbegin\nline = get\nif line =~ /^([A-z][a-z]+) suddenly appears\\.$/\ngroup_members.delete $1\nelsif line == 'go'\nbreak\nend\nend while group_members.length > 0; end;"
	to_hub={
		'19706' => hub_string,
		'19709' => hub_string,
		'19745' => hub_string,
		'19752' => hub_string,
		'19778' => hub_string,
		'19723' => hub_string,
		'19721' => hub_string,
		'19719' => hub_string
	}
	transport_hub='19707'

	if use_portals
		if have_pass
			before_portal = ''
			after_portal = ''
		else
			before_portal = "$go2_portal_need_fill_hand = false; unless (righthand? == 'ticket') or (lefthand? == 'ticket'); empty_hand; $go2_portal_need_fill_hand = true; dothistimeout 'get my portal ticket', 3, /^You remove|^You grab|^You reach into|^Get what\?/; end; unless (righthand? == 'ticket') or (lefthand? == 'ticket'); fill_hand if $go2_portal_need_fill_hand; echo 'a decent portal ticket would be helpful.'; exit; end; result = dothistimeout 'look my portal ticket', 20, /Realizing the ticket has expired|I could not find what you were referring to|days left on your ticket/; unless result =~ /days left on your ticket/; echo 'a decent portal ticket would be helpful.'; exit; end; "
			after_portal = "dothistimeout 'stow my ticket', 3, /^You put|^You slip .*? into|^You tuck|^What were you trying to stow\?/; fill_hand if $go2_portal_need_fill_hand"
		end
		for start_room in to_nexus.keys
			for end_room in from_nexus.keys
				if start_room != end_room
					Map[start_room.to_i].wayto[end_room] = StringProc.new(before_portal + to_nexus[start_room] + from_nexus[end_room] + after_portal)
					Map[start_room.to_i].timeto[end_room] = 2
				end
			end
		end
		for start_room in to_hub.keys
			Map[start_room.to_i].wayto[transport_hub] = StringProc.new(before_portal + to_hub[start_room] + after_portal)
			Map[start_room.to_i].timeto[transport_hub] = 1
		end
		Room[19753].timeto['19745']=0.2
	else
		for start_room in to_nexus.keys
			for end_room in from_nexus.keys
				if start_room != end_room
					Map[start_room.to_i].wayto.delete(end_room)
					Map[start_room.to_i].timeto.delete(end_room)
				end
			end
		end
		for start_room in to_old_nexus.keys
			for end_room in from_old_nexus.keys
				if start_room != end_room
					Map[start_room.to_i].wayto.delete(end_room)
					Map[start_room.to_i].timeto.delete(end_room)
				end
			end
		end
		for start_room in to_hub.keys
			Map[start_room.to_i].wayto.delete(transport_hub)
			Map[start_room.to_i].timeto.delete(transport_hub)
		end
	end
}

change_map_vaalor_shortcut = proc { |use_shortcut|
	if use_shortcut
		Room[16745].timeto['16746'] = 15
		Room[16746].timeto['16745'] = 15
	else
		Room[16745].timeto['16746'] = 15000
		Room[16746].timeto['16745'] = 15000
	end
}

current_or_new_room = proc {
	room = Map.list.find { |room| room.title.include?(XMLData.room_title) and room.desc.include?(XMLData.room_description.strip) and room.paths.include?(XMLData.room_exits_string.strip) }
	20.times {
		break if room
		sleep 0.05
		room = Map.list.find { |room| room.title.include?(XMLData.room_title) and room.desc.include?(XMLData.room_description.strip) and room.paths.include?(XMLData.room_exits_string.strip) }
	}
	unless room
		room = Map.new(Map.get_free_id, [ XMLData.room_title ], [ XMLData.room_description.strip ], [ XMLData.room_exits_string.strip ])
		$map_history.push "Created room #{room.id}"
	end
	room
}

combine_rooms = proc { |this_room, that_room|
	first_room = Room[[this_room.to_i, that_room.to_i].min]
	second_room = Room[[this_room.to_i, that_room.to_i].max]
	second_room.title.each { |title| first_room.title.push(title) unless first_room.title.include?(title) }
	second_room.desc.each { |desc| first_room.desc.push(desc) unless first_room.desc.include?(desc) }
	second_room.paths.each { |paths| first_room.paths.push(paths) unless first_room.paths.include?(paths) }
	second_room.wayto.each_pair { |adj_room,way|
		unless first_room.wayto.keys.include?(adj_room)
			first_room.wayto[adj_room] = way
			first_room.timeto[adj_room] = second_room.timeto[adj_room]
		end
	}
	$map_done.delete(second_room.id)
	$map_pending.delete(second_room.id.to_s)
	$fix_done.delete(second_room.id)
	$fix_pending.delete(second_room.id.to_s)
	Map.list[second_room.id] = nil
	key = second_room.id.to_s
	Map.list.each { |room|
		if room.wayto.keys.include?(key)
			room.wayto[first_room.id.to_s] = room.wayto[key]
			room.timeto[first_room.id.to_s] = room.timeto[key]
			room.wayto.delete(key)
			room.timeto.delete(key)
		end
	}
	Map.list.each { |room|
		room.wayto.each_pair { |rm,way|
			if (way.class == Proc) and way._dump =~ /#{second_room.id.to_s}/
				respond
				respond "#{room.id} => #{rm}"
				respond way._dump
				respond
				clear
				echo 'this path refrences the deleted room number'
				echo "replace #{second_room.id} with #{first_room.id}? (send yes/no)"
				respond
				line = nil
				line = get until line =~ /^yes$|^no$/i
				if line =~ /^yes$/i
					room.wayto[rm] = StringProc.new(way._dump.gsub(second_room.id.to_s, first_room.id.to_s))
				end
			end
		}
	}
}

check_silvers = proc {
	silvers = nil
	action = proc { |server_string|
		if server_string =~ /^\s*Name\:|^\s*Gender\:|^\s*Normal \(Bonus\)|^\s*Strength \(STR\)\:|^\s*Constitution \(CON\)\:|^\s*Dexterity \(DEX\)\:|^\s*Agility \(AGI\)\:|^\s*Discipline \(DIS\)\:|^\s*Aura \(AUR\)\:|^\s*Logic \(LOG\)\:|^\s*Intuition \(INT\)\:|^\s*Wisdom \(WIS\)\:|^\s*Influence \(INF\)\:/
			nil
		elsif server_string =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+)/
			silvers = $1.to_i
			DownstreamHook.remove('go2_check_silvers')
			nil
		else
			server_string
		end
	}
	DownstreamHook.add('go2_check_silvers', action)
	silence_me unless undo_silence = silence_me
	put 'info'
	silence_me if undo_silence
	wait_until { silvers }
	silvers
}

silver_cost = proc { |path|
	cost = 0
	path.each_index { |index| 
		Room[path[index]].tags.each { |tag|
			if tag =~ /^silver-cost:#{path[index+1]}:(.*)$/
				cost_string = $1
				if cost_string =~ /^[0-9]+$/
					cost += cost_string.to_i
				else
					cost = StringProc.new(cost_string).call.to_i
				end
			end
		}
	}
	cost
}

#
# check for general commands
#
if script.vars.empty? or script.vars[0].strip =~ /^help$/i
	show_help.call
	exit
elsif script.vars[0] =~ /^targets$/i
	echo 'generating list...'
	interesting_tags = [ "alchemist", "consignment", "bank", "furrier", "gemshop", "herbalist", "locksmith", "pawnshop", "town", "advguard", "advguild", "advpickup", "armorshop", "bakery", "bardguild", "boutique", "chronomage", "clericguild", "empathguild", "forge", "general store", "npccleric", "npchealer", "movers", "smokeshop", "sorcererguild", "warriorguild", "weaponshop", "wizardguild", "advguard2", "clericshop", "fletcher", "rangerguild", "sunfist", "voln", "exchange", "inn", "exchange" ]
	town_list = Map.list.find_all { |room| room.tags.include?('town') }
	town_ids = town_list.collect { |room| room.id }
	town_hash = Hash.new
	town_ids.each { |id| town_hash[id] = Array.new }
	for tag in interesting_tags
		for room in Map.list.find_all { |room| room.tags.include?(tag) }
			if nearest = Room[room.id].find_nearest(town_ids)
				unless town_hash[nearest].any? { |line| line =~ /^ \- #{tag.ljust(17)} / }
					town_hash[nearest].push " - #{tag.ljust(17)} #{room.title.first.sub(/^\[/, '').sub(/\]$/, '').ljust(34)} - #{room.id.to_s.rjust(5)}"
				end
			end
		end
	end
	output = "\n"
	town_list.each { |town_room|
		output.concat "---------------------------------------------------------------\n"
		output.concat " - town              #{town_room.title.first.sub(/^\[/, '').sub(/\]$/, '').ljust(34)} - #{town_room.id.to_s.rjust(5)}\n"
		output.concat "---------------------------------------------------------------\n"
		town_hash[town_room.id].sort.each { |thingie|
			output.concat thingie
			output.concat "\n"
		}
		output.concat "\n"
	}
	respond output
	exit
elsif script.vars[0] =~ /^list$/i
	begin
		for target_name,target_num in Settings['custom targets'].sort
			respond "   #{target_name.ljust(20)} = #{target_num.to_s.rjust(5)}   #{Map[target_num].title.first}"
		end
	rescue
		for target_name,target_num in Settings['custom targets']
			respond "   #{target_name.ljust(20)} = #{target_num.to_s.rjust(5)}   #{Map[target_num].title.first}"
		end
	end
	exit
elsif script.vars[1] =~ /^save/i
	new_target = script.vars[0].sub(/\s*save\s*/i, '').split(/\s*=\s*/)
	if new_target[0] =~ /^[0-9]+$/
		echo "Target name can't be just a number."
		exit
	end
	if new_target[1].strip =~ /^current$/i
		unless new_room = Map.current
			echo 'error: your current room was not found in the map database.'
			exit
		end
	else
		unless new_target[1] =~ /^\d+$/ and new_room = Map[new_target[1].to_i]
			unless new_room = Map[new_target[1]]
				show_help.call
				echo "error: could not identify the target room"
				exit
			end
		end
	end
	Settings['custom targets'][new_target[0]] = new_room.id
	Settings.save
	echo "custom target saved (#{new_target[0]}->#{new_room.id})"
	exit
elsif script.vars[1] =~ /^delete$/i
	delkey = script.vars[0].sub(/\s*delete\s*/i, '')
	if kilkey = Settings['custom targets'].keys.find { |key| key =~ /^#{delkey}$/i } or kilkey = Settings['custom targets'].keys.find { |key| key =~ /^#{delkey}/i }
		Settings['custom targets'].delete(kilkey)
		Settings.save
		echo "custom target deleted (#{kilkey})"
		exit
	else
		echo "#{delkey} does not appear to be a custom target"
		exit
	end
elsif script.vars[1] =~ /^reload$/i
	Map.reload
	echo  'map data has been reloaded'
	exit
end

target_search_string = script.vars[0]
if target_search_string =~ /\b(?:\-\-)?typeahead=([0-9]+)\b/i
	setting_typeahead = $1.to_i
	target_search_string.gsub!(/\b(?:\-\-)?typeahead=[0-9]+\b/i, '')
else
	setting_typeahead = nil
end
if XMLData.game =~ /^GSPlat/
	if target_search_string =~ /\bportals?=(on|true|yes|off|false|no)\b/i
		setting_platinum_portals = setting_value[$1]
		target_search_string.gsub!(/\bportals?=(?:on|true|yes|off|false|no)\b/i, '')
	else
		setting_platinum_portals = nil
	end
	if target_search_string =~ /\bportal\-pass=(on|true|yes|off|false|no)\b/i
		setting_platinum_portal_pass = setting_value[$1]
		target_search_string.gsub!(/\bportal\-pass=(?:on|true|yes|off|false|no)\b/i, '')
	else
		setting_platinum_portal_pass = nil
	end
end
if XMLData.game =~ /^GS/
	if target_search_string =~ /\bshortcut=(on|true|yes|off|false|no)\b/i
		setting_vaalor_shortcut = setting_value[$1]
		target_search_string.gsub!(/\bshortcut=(?:on|true|yes|off|false|no)\b/i, '')
	else
		setting_vaalor_shortcut = nil
	end
	if target_search_string =~ /\bice\-?mode=(auto|wait|run)\b/i
		if $1.downcase == 'auto'
			setting_ice_mode = :auto
		elsif $1.downcase == 'wait'
			setting_ice_mode = :wait
		elsif $1.downcase == 'run'
			setting_ice_mode = :run
		end
		target_search_string.gsub!(/\bice\-?mode=(auto|wait|run)\b/i, '')
	else
		setting_ice_mode = nil
	end
	if target_search_string =~ /\bget[_\-]?(?:silver|coin)s?=(on|true|yes|off|false|no)\b/i
		setting_get_silvers = setting_value[$1]
		target_search_string.gsub!(/\bget[_\-]?(?:silver|coin)s?=(?:on|true|yes|off|false|no)\b/i, '')
	else
		setting_get_silvers = nil
	end
	if target_search_string =~ /\buse[_\-]?seeking=(on|true|yes|off|false|no)\b/i
		setting_use_seeking = setting_value[$1]
		target_search_string.gsub!(/\buse[_\-]?seeking=(?:on|true|yes|off|false|no)\b/i, '')
	else
		setting_use_seeking = nil
	end
	if target_search_string =~ /\b(?:\-\-)?get\-return\-trip\-silvers=(on|true|yes|off|false|no)\b/i
		setting_get_return_trip_silvers = setting_value[$1]
		target_search_string.gsub!(/\b(?:\-\-)?get\-return\-trip\-silvers=(on|true|yes|off|false|no)\b/i, '')
	else
		setting_get_return_trip_silvers = nil
	end
end
if target_search_string =~ /\b_disable_confirm_\b|--disable-confirm/i
	setting_disable_confirm = true
	target_search_string.gsub!(/\b_disable_confirm_\b|--disable-confirm/i, '')
else
	setting_disable_confirm = false
end
target_search_string = target_search_string.gsub('  ', ' ').strip

#
# if only settings were given, save the settings and exit
#
if target_search_string.empty?
	unless setting_typeahead.nil?
		Settings['typeahead'] = setting_typeahead
		echo "typeahead setting changed to #{setting_typeahead}"
	end
	if XMLData.game =~ /^GSPlat/
		unless setting_platinum_portals.nil?
			CharSettings['platinum portals'] = setting_platinum_portals
			if setting_platinum_portal_pass.nil?
				change_map_platinum_portals.call(setting_platinum_portals, CharSettings['platinum portal pass'])
			else
				change_map_platinum_portals.call(setting_platinum_portals, setting_platinum_portal_pass)
			end
			echo "platinum portals will #{'not ' unless setting_platinum_portals}be used"
		end
		unless setting_platinum_portal_pass.nil?
			CharSettings['platinum portal pass'] = setting_platinum_portal_pass
			if setting_platinum_portals.nil?
				change_map_platinum_portals.call(CharSettings['platinum portals'], setting_platinum_portal_pass)
			else
				change_map_platinum_portals.call(setting_platinum_portals, setting_platinum_portal_pass)
			end
			echo "the script will #{'not ' if setting_platinum_portal_pass}try to pull out a portal ticket to use platinum portals"
		end
	end
	if XMLData.game =~ /^GS/
		unless setting_vaalor_shortcut.nil?
			CharSettings['vaalor shortcut'] = setting_vaalor_shortcut
			change_map_vaalor_shortcut.call(setting_vaalor_shortcut)
			echo "shortcut between Ta'Vaalor and Ta'Illistim will #{'not ' unless setting_vaalor_shortcut}be used"
		end
		unless setting_get_silvers.nil?
			CharSettings['get silvers'] = setting_get_silvers
			echo "go2 #{ if setting_get_silvers then 'may' else 'will not' end } withdraw money from your bank account for travel expenses"
		end
		unless setting_use_seeking.nil?
			CharSettings['use seeking'] = setting_use_seeking
			echo "go2 #{ if setting_use_seeking then 'may' else 'will not' end } use symbol of seeking for faster travel"
		end
		unless setting_ice_mode.nil?
			CharSettings['ice mode'] = setting_ice_mode
			# fixme: echo "something"
		end
		unless setting_get_return_trip_silvers.nil?
			CharSettings['get return trip silvers'] = setting_get_return_trip_silvers
			echo "silvers will #{'not ' unless setting_get_return_trip_silvers}be withdrawn in advance for return trips"
		end
	end
	Settings.save
	exit
end

unless start_room = Room.current
	echo 'error: your current room was not found in the map database'
	exit
end

#
# target was given; use saved settings, override them with command line settings, but don't save them
#
setting_typeahead = Settings['typeahead'] if setting_typeahead.nil?
unless setting_get_silvers.nil?
	before_dying { $go2_get_silvers = CharSettings['get silvers'] }
	$go2_get_silvers = setting_get_silvers
else
	$go2_get_silvers = CharSettings['get silvers']
end
unless setting_use_seeking.nil?
	before_dying { $go2_use_seeking = CharSettings['use seeking'] }
	$go2_use_seeking = setting_use_seeking
else
	$go2_use_seeking = CharSettings['use seeking']
end
unless setting_ice_mode.nil?
	before_dying { $go2_ice_mode = CharSettings['ice mode'] }
	$go2_ice_mode = setting_ice_mode
else
	$go2_ice_mode = CharSettings['ice mode']
end
setting_platinum_portals = CharSettings['platinum portals'] if setting_platinum_portals.nil?
setting_platinum_portal_pass = CharSettings['platinum portal pass'] if setting_platinum_portal_pass.nil?
change_map_platinum_portals.call(setting_platinum_portals, setting_platinum_portal_pass)
setting_vaalor_shortcut = CharSettings['vaalor shortcut'] if setting_vaalor_shortcut.nil?
change_map_vaalor_shortcut.call(setting_vaalor_shortcut)
setting_get_return_trip_silvers = CharSettings['get return trip silvers'] if setting_get_return_trip_silvers

#
# find target
#
if target_search_string =~ /^[0-9]+$/
	unless destination = Map[target_search_string.to_i]
		echo "error: room number (#{target_search_string}) was not found in the map database"
		exit
	end
	confirm = false
elsif (target = Settings['custom targets'].keys.find { |key| key =~ /^#{target_search_string}$/i }) or (target = Settings['custom targets'].keys.find { |key| key =~ /^#{target_search_string}/i })
	destination_id = Settings['custom targets'][target]
	unless destination = Map[destination_id]
		echo "error: custom target (#{destination_id}) was not found in the map database"
		exit
	end
	confirm = false
elsif defined?(Map.tags) and Map.tags.include?(target_search_string)
	target_list = Map.list.find_all { |room| room.tags.include?(target_search_string) }.collect { |room| room.id }
	if target_list.empty?
		echo 'fixme (1)'
		exit
	end
	if target_list.include?(start_room.id)
		echo "you're already here..."
		exit
	end
	previous, shortest_distances = start_room.dijkstra(target_list)
	target_list.delete_if { |room_id| shortest_distances[room_id].nil? }
	if target_list.empty?
		echo 'fixme (2)'
		exit
	end
	target_id = target_list.sort { |a,b| shortest_distances[a] <=> shortest_distances[b] }.first
	unless target_id and (destination = Map[target_id])
		echo 'fixme (3)'
		exit
	end
	if shortest_distances[destination.id] < 20
		confirm = false
	else
		confirm = true
	end
else
	chkre = /#{target_search_string.sub(/\.$/, '').gsub(/\.(?:\.\.)?/, '|')}/i
	chk = /#{Regexp.escape(target_search_string.strip)}/i
	room_list = Map.list.find_all { |room| room.title.find { |title| title =~ chk } or room.desc.find { |desc| desc =~ chk } or room.desc.find { |desc| desc =~ chkre } }
	if room_list.nil? or room_list.empty?
		echo 'no matching rooms found'
		exit
	end
	if room_list.length == 1
		destination = room_list.first
		confirm = true
	else
		destination = nil
		first = 1
		show_size = 20
		respond "#{room_list.length} matching rooms found:"
		while first < room_list.length
			respond
			for which in (first)..([(first+show_size-1),room_list.length].min)
				respond "#{(which).to_s.rjust(5)}: #{room_list[which-1].title.first.ljust(37)} (#{room_list[which-1].id})"
			end
			respond
			respond "select a room (;send <#{first}-#{[first+show_size-1,room_list.length].min}>)#{ " or ';send next' for more" if (first+show_size-1) < room_list.length}"
			respond
			clear
			line = nil
			line = get until line.strip =~ /^[0-9]+$|^next$/i
			if line =~ /^next$/
				first += show_size
			else
				destination = room_list[line.to_i-1]
				break
			end
		end
		unless destination
			echo 'no more rooms match'
			exit
		end
		confirm = false
	end
end

#
# move
#
if start_room.id == destination.id
	echo "you're already here..."
	exit
end

start_time = nil
error_count = 0
$go2_restart = false

loop {

	moves_sent = $room_count

	if $go2_restart
		break if Room.current.id == destination.id
		echo 'restarting script...'
		if error_count > 1
			dothis 'help lag-check', /^No help files matching that entry were found\./
		end
		unless start_room = Map.current
			echo 'error: your current room was not found in the map database'
			exit
		end
		previous, shortest_distances = Map.dijkstra(start_room.id, destination.id)
	end

	unless previous and shortest_distances
		previous, shortest_distances = Map.dijkstra(start_room.id, destination.id)
	end
	unless previous[destination.id]
		echo "error: failed to find a path between your current room (#{start_room.id}) and destination room (#{destination.id})"
		exit
	end
	path = [ destination.id ]
	path.push(previous[path[-1]]) until previous[path[-1]].nil?
	path.reverse!
	est_time = shortest_distances[destination.id]
	previous = shortest_distances = nil

	if XMLData.game =~ /^GS/
		needed_silvers = silver_cost.call(path)
		if setting_get_return_trip_silvers
			return_previous, return_shortest_distances = Map.dijkstra(destination.id, start_room.id)
			return_path = [ start_room.id ]
			return_path.push(return_previous[path[-1]]) until return_previous[return_path[-1]].nil?
			return_path.reverse!
			return_previous = return_shortest_distances = nil
			needed_silvers += silver_cost.call(return_path)
			return_path = nil
		end
		if needed_silvers > 0
			current_silvers = check_silvers.call
			echo "current_silvers: #{current_silvers}" if $go2_debug
			echo "needed_silvers: #{needed_silvers}" if $go2_debug
			if needed_silvers > current_silvers
				if $go2_get_silvers
					unless bank_id = Room.current.find_all_nearest_by_tag('bank').find { |room_id| current_silvers >= silver_cost.call(Room.current.path_to(room_id)) }
						echo "error: You're too poor to go to the bank."
						exit
					end
					echo "bank_id: #{bank_id}" if $go2_debug
					pr, s = Map.dijkstra(Room.current.id, bank_id)
					est_time = s[bank_id]
					pr = s = nil
					pr, s = Map.dijkstra(bank_id, destination.id)
					est_time += s[destination.id]
					pr = s = nil
					unless setting_disable_confirm or not confirm
						confirm = false
						respond "ETA: #{(est_time/60.0).as_time}.  #{path.length-1} (wrong) rooms between this room (#{start_room.id}), the bank (#{bank_id}), and:"
						respond destination.to_s + "\n\nTo go here, unpause the script.  To abort, kill the script."
						pause_script
					end
					if $go2_started_go2_bank
						echo "You're too poor to go to the bank."
						exit
					end
					begin
						$go2_started_go2_bank = true
						go2_count = Script.running.find_all { |s| s.name == script.name }.length
						force_start_script script.name, [ bank_id.to_s ]
						wait_until { Script.running.find_all { |s| s.name == script.name }.length <= go2_count }
					ensure
						$go2_started_go2_bank = false
					end
					unless start_room = Room.current
						echo 'error: your current room was not found in the map database'
						exit
					end
					moves_sent = $room_count
					previous, shortest_distances = Map.dijkstra(start_room.id, destination.id)
					unless previous[destination.id]
						echo "error: failed to find a path between your current room (#{start_room.id}) and destination room (#{destination.id})"
						exit
					end
					path = [ destination.id ]
					path.push(previous[path[-1]]) until previous[path[-1]].nil?
					path.reverse!
					est_time = shortest_distances[destination.id]
					previous = shortest_distances = nil
					needed_silvers = silver_cost.call(path)
					if setting_get_return_trip_silvers
						return_previous, return_shortest_distances = Map.dijkstra(destination.id, start_room.id)
						return_path = [ start_room.id ]
						return_path.push(return_previous[path[-1]]) until return_previous[return_path[-1]].nil?
						return_path.reverse!
						return_previous = return_shortest_distances = nil
						needed_silvers += silver_cost.call(return_path)
						return_path = nil
					end
					fput 'unhide' if hidden? or invisible?
					if XMLData.room_title == '[Pinefar, Depository]'
						fput "ask banker for #{[(needed_silvers - check_silvers.call), 20].max} silvers"
					else
						fput "withdraw #{needed_silvers - check_silvers.call} silvers"
					end
				else
					echo 'You are too poor to make this trip.'
					echo 'To give go2 permission to take your monies, type ;go2 getsilvers=on'
					echo 'Continuing anyway in 10 seconds...'
					sleep 10
				end
			end
		end
	end

	if setting_disable_confirm or $go2_restart or not confirm
		echo "ETA: #{(est_time/60.0).as_time} (#{path.length-1} rooms to move through)"
	else 
		respond "ETA: #{(est_time/60.0).as_time}.  #{path.length-1} rooms between this room (#{start_room.id}) and:"
		respond destination.to_s + "\n\nTo go here, unpause the script.  To abort, kill the script."
		pause_script
	end

	start_time = Time.now.to_f unless $go2_restart

	$go2_restart = false

	path.each_index { |idx|
		room = Map[path[idx]]
		next_id = (path[idx + 1] || break).to_s

		exit if dead?
		wait_while { muckled? }
		fput 'stand' unless standing?
		waitrt?

		if room.wayto[next_id].class == Proc
			# echo 'proc: ' + room.id.to_s + ' -> ' + next_id.to_s
			if setting_typeahead > 0
				50.times {
					break if ($room_count >= moves_sent)
					sleep 0.05
				}
				unless $room_count >= moves_sent
					echo 'reducing typeahead setting...'
					setting_typeahead -= 1
					$go2_restart = true
					break
				end
			end
			begin
				room_id_before_proc = Room.current.id
				room.wayto[next_id].call
				# $go2_restart = true if Room.current.id == room_id_before_proc
				break if $go2_restart
			rescue
				respond "--- error running mini-script: #{room.id} -> #{next_id}"
				respond $!
				exit
			end
			moves_sent = $room_count
			if $fix_map_db
				real_next_id = Room.current.id.to_s
				unless (real_next_id == next_id)
					echo "current room id: #{real_next_id}; expected id: #{next_id}"
					# We're not in the room we're suposed to be, but we won't delete a mini-script movements
					echo "bad mini-script (#{room.id.to_s}->#{next_id})"
					error_count += 1
					exit if error_count > 20
					$go2_restart = true
					break
				end
			end
		else
			if setting_typeahead > 0
				50.times {
					break if (($room_count + setting_typeahead) >= moves_sent)
					sleep 0.05
				}
				unless ($room_count + setting_typeahead) >= moves_sent
					echo 'reducing typeahead setting...'
					setting_typeahead -= 1
					$go2_restart = true
					break
				end
				put room.wayto[next_id]
				moves_sent += 1
			else
				result = move room.wayto[next_id]
				if result
					if $fix_map_db
						# move succeeded, but did it move us to where we expected?
						real_nextroom = current_or_new_room.call
						real_next_id = real_nextroom.id.to_s
						unless (real_next_id == next_id)
							from_id = room.id.to_s
							respond
							respond '--- Are these the same room?'
							respond Room[next_id.to_i]
							respond Room[next_id.to_i].wayto.inspect
							respond real_nextroom
							respond real_nextroom.wayto.inspect
							respond '--- type   ;send yes   or   ;send no'
							respond '--- assuming "no" in 10 seconds...'
							respond
							clear
							answer = nil
							100.times {
								sleep 0.1
								break if answer = clear.find { |line| line =~ /^yes$|^no$/i }
							}
							if answer =~ /^yes$/i
								combine_rooms.call(next_id, real_next_id)
							else
								echo "fixing map database..."
								echo "adding: #{from_id} -> #{room.wayto[next_id]} -> #{real_next_id}"
								room.wayto[real_next_id] = room.wayto[next_id]
								room.timeto[real_next_id] = 0.2
								echo "deleting: #{from_id} -> #{room.wayto[next_id]} -> #{next_id}"
								room.wayto.delete(next_id)
								room.timeto.delete(next_id)
							end
							error_count += 1
							$go2_restart = true
							break
						end
					end
				else
					error_count += 1
					if (idx == 0) and (error_count > 2) and (Room.current.id == room.id)
						echo "changing Room[#{room.id}].timeto['#{next_id}'] to nil"
						old_room = room
						old_next_id = next_id
						old_timeto = room.timeto[next_id]
						before_dying {
							echo "reverting Room[#{old_room.id}].timeto['#{old_next_id}'] back to #{old_timeto.inspect}"
							old_room.timeto[old_next_id] = old_timeto
						}
						room.timeto[next_id] = nil
					end
					$go2_restart = true
					break
				end
			end
		end
		waitrt?
		if $go2_cast and Spell[515].active? and (checkprep == Spell[402].name) and Spell[402].affordable?
			Spell[402].cast
		end
	}

	if setting_typeahead > 0
		50.times {
			break if ($room_count >= moves_sent)
			sleep 0.05
		}
		unless $room_count >= moves_sent
			$go2_restart = true
		end
	end

	break unless $go2_restart
}

sleep 0.1
echo "travel time: #{((Time.now.to_f - start_time) / 60.00).as_time}"
